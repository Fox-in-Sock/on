/* PROGRAMME TO IMPLEMENT NUMERICAL INTEGRATION USING TRAPEZOIDAL
METHOD */
Objective: to find the integral value of definite integral by trapezoidal rule
Theory: briefly describe about the method with figure and formula whichever applicable.
Algorithm:
1. Input the lower limit of integration a, the upper limit of integration b, and the number of subintervals n.
2. Calculate the step size h using the formula h = (b - a) / n.
3. Set the initial value of the approximation sum to (f(a) + f(b)) / 2.0, where f(x) represents the function to
be integrated.
4. Iterate i from 1 to n-1 (excluding the first and last subintervals).
a. Calculate the value of x at each subinterval using the formula x = a + i * h.
b. Add the value of f(x) to the current approximation sum.
5. Multiply the final approximation sum by the step size h to obtain the result of the numerical integration.
6. Output the result.
C code for trapezoidal rule:
#include <stdio.h>
#include <math.h>
// Function to integrate
double function(double x) {
return (4 * exp(x)/(1+pow(x,3))); // Replace with your desired function
}
// Trapezoidal rule for numerical integration
double trapezoidalRule(double a, double b, int n) {
double h = (b - a) / n; // Step size
double sum = (function(a) + function(b)) / 2.0; //finding sum of 1st term and last term
for (int i = 1; i < n; i++) {
double x = a + i * h;
sum += function(x); //finding sum of intermediate terms.
}
return h * sum;
}
int main() {
double a = 0.0; // Lower limit of integration
double b = 2.0; // Upper limit of integration
int n = 100; // Number of subintervals
double result = trapezoidalRule(a, b, n);
printf("Numerical integration result: %lf\n", result);
return 0;
}

Output: show the output
Discussion and conclusion: discuss about its accuracy in comparison to other method and how can it be
improved.

/* PROGRAMME TO IMPLEMENT NUMERICAL INTEGRATION USING SIMPSON 1/3 METHOD
*/
Objective: to find the integral value of definite integral by Simpson 1/3 rule
Theory: briefly describe about the method with figure and formula whichever applicable.
Algorithm:
1. Input the lower limit of integration a, the upper limit of integration b, and the number of subintervals n.
2. Calculate the step size h using the formula h = (b - a) / n.
3. Set the initial value of the approximation sum to f(a) + f(b), where f(x) represents the function to be
integrated.
4. Iterate i from 1 to n-1.
a. Calculate the value of x at each subinterval using the formula x = a + i * h.
b. If i is even, add 2 * f(x) to the current approximation sum.
c. If i is odd, add 4 * f(x) to the current approximation sum.
5. Multiply the final approximation sum by h/3 to obtain the result of the numerical integration.
6. Output the result.
C code:
#include <stdio.h>
#include <math.h>
// Function to integrate
double function(double x) {
return cos(x); // Replace with your desired function
}
// Simpson's 1/3 rule for numerical integration
double simpsonsRule(double a, double b, int n) {
double h = (b - a) / n; // Step size
double sum = function(a) + function(b);
for (int i = 1; i < n; i++) {
double x = a + i * h;
if (i % 2 == 0)
sum += 2 * function(x);
else
sum += 4 * function(x);
}
return (h / 3.0) * sum;
}
int main() {
double a = 1.0; // Lower limit of integration

double b = 3.0; // Upper limit of integration
int n = 4; // Number of subintervals (must be even)
double result = simpsonsRule(a, b, n);
printf("Numerical integration result: %lf\n", result);
return 0;
}

Output: show the output
Discussion and conclusion: discuss about its accuracy in comparison to other method and why it is called 1/3?
Exercise: implement Simpson 3/8 rule taking help from above implementation.

/* PROGRAMME TO IMPLEMENT NUMERICAL DIFFERENTIATION USING FORWARD
DIFFERENCE METHOD FOR TABULATED DATA*/
Objective: to find the numerical differentiation of tabulated points by forward difference method
Theory: briefly describe about the method with figure and formula whichever applicable. Why it is called
forward difference?
Algorithm:
1. Input the tabulated data points, including the x-values x[] and the corresponding y-values y[].
2. Input the index of the point at which to differentiate, index.
3. Calculate the step size h as the difference between x[index + 1] and x[index].
4. Calculate the forward difference using the formula: forward_difference = (-3*y[index]+4*y[index + 1]-
y[index + 2])/(2*h)
5. Output the result of the forward difference, which represents the numerical approximation of the
derivative at the given index.
C code:
#include <stdio.h>
// Tabulated data points
double x[] = {1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6}; // x values
double y[] = {7.989, 8.403, 8.781, 9.129, 9.451, 9.750, 10.031}; // y values
// Numerical differentiation using forward difference
double forwardDifference(int index) {
double h = x[index + 1] - x[index];
return (-3*y[index]+4*y[index + 1]-y[index + 2])/(2*h);
}
int main() {
int index = 1; // it means derivative is need to be found at 1.1
double result = forwardDifference(index);

printf("Numerical differentiation result: %.4lf\n", result);
return 0;
}
