/* PROGRAMME TO IMPLEMENT EULER METHOD */
Objective: to find the value of y at x= xn for given ODE.
Theory: briefly describe about the method with figure and formula whichever applicable.
---------------------------------------------------------------------------------------
Algorithm:
1. Start with the initial values: x0, y0
2. Set the step size h and the point at which to approximate the solution xn
3. Initialize variables: x = x0, y = y0
4. Repeat the following steps until x <= xn:
a. Compute the slope at the current point: slope = f(x, y)
b. Update the values using Euler's method:
y = y + h * slope
x = x + h
c. Print the current values: x, y
5. Print the approximate solution at x = xn: "Approximate solution at x = xn is y = y"
6. End
--------------------------------------------------------------------------------------
C code:
#include <stdio.h>
// Function defining the ODE: dy/dx = f(x, y)
double f(double x, double y) {
return x + y;
}
// Euler method implementation
void eulerMethod(double x0, double y0, double h, double xn) {
double x = x0;
double y = y0;
printf("x\t\t y\n"); // Print table headers
while (x <= xn) {
printf("%lf\t %lf\n", x, y); // Print current x and y values
// Compute the slope at the current point
double slope = f(x, y);
// Update the values using Euler's method
y = y + h * slope;
x = x + h;

}
}
int main() {
double x0 = 0.0; // Initial x value
double y0 = 1.0; // Initial y value
double h = 0.1; // Step size
double xn = 1.0; // Point at which to approximate the solution
eulerMethod(x0, y0, h, xn);
return 0;
}
=======================================================================================
/* PROGRAMME TO IMPLEMENT MODIFIED EULER METHOD */
Objective: to find the value of y at x= xn for given ODE.
Theory: briefly describe about the method with figure and formula whichever applicable.
Algorithm:
1. Start with the initial values: x0, y0
2. Set the step size h and the point at which to approximate the solution xn
3. Initialize variables: x = x0, y = y0
4. Repeat the following steps until x <= xn:
a. Compute the slope at the current point: slope1 = f(x, y)
b. Compute the slope at the next point: slope2 = f(x + h, y + h * slope1)
c. Update the values using the Modified Euler method:
y = y + (h / 2.0) * (slope1 + slope2)
x = x + h
d. Print the current values: x, y
5. Print the approximate solution at x = xn: "Approximate solution at x = xn is y = y"
6. End
---------------------------------------------------------------------------------------
C code:
#include <stdio.h>
// Function defining the ODE: dy/dx = f(x, y)
double f(double x, double y) {
return x + y;
}
// Modified Euler method implementation
void modifiedEulerMethod(double x0, double y0, double h, double xn) {
double x = x0;
double y = y0;
printf("x\t\t y\n"); // Print table headers
while (x <= xn) {
printf("%lf\t %lf\n", x, y); // Print current x and y values
// Compute the slopes at the current and next points
double slope1 = f(x, y);
double slope2 = f(x + h, y + h * slope1);
// Update the values using the Modified Euler method
y = y + (h / 2.0) * (slope1 + slope2);
x = x + h;
}
}
int main() {
double x0 = 0.0; // Initial x value
double y0 = 1.0; // Initial y value
double h = 0.1; // Step size
double xn = 1.0; // Point at which to approximate the solution
modifiedEulerMethod(x0, y0, h, xn);
return 0;
}


/* PROGRAMME TO IMPLEMENT RK 4 METHOD */

Objective: to find the value of y at x= xn for given ODE.
Theory: briefly describe about the method with figure and formula whichever applicable.
Algorithm:
1. Start with the initial values: x0, y0
2. Set the step size h and the point at which to approximate the solution xn
3. Initialize variables: x = x0, y = y0
4. Repeat the following steps until x <= xn:
a. Print the current values: x, y
b. Compute the intermediate slopes:
k1 = h * f(x, y)
k2 = h * f(x + h/2.0, y + k1/2.0)
k3 = h * f(x + h/2.0, y + k2/2.0)
k4 = h * f(x + h, y + k3)
c. Update the values using the RK4 method:
y = y + (k1 + 2.0*k2 + 2.0*k3 + k4) / 6.0
x = x + h
5. Print the approximate solution at x = xn: "Approximate solution at x = xn is y = y"
6. End
C code:
#include <stdio.h>
// Function defining the ODE: dy/dx = f(x, y)
double f(double x, double y) {
return x + y;
}
// RK4 method implementation
void rk4Method(double x0, double y0, double h, double xn) {
double x = x0;
double y = y0;
printf("x\t\t y\n"); // Print table headers
while (x <= xn) {
printf("%lf\t %lf\n", x, y); // Print current x and y values
// Compute the intermediate slopes
double k1 = h * f(x, y);
double k2 = h * f(x + h/2.0, y + k1/2.0);

double k3 = h * f(x + h/2.0, y + k2/2.0);
double k4 = h * f(x + h, y + k3);
// Update the values using the RK4 method
y = y + (k1 + 2.0*k2 + 2.0*k3 + k4) / 6.0;
x = x + h;
}
}
int main() {
double x0 = 0.0; // Initial x value
double y0 = 1.0; // Initial y value
double h = 0.1; // Step size
double xn = 1.0; // Point at which to approximate the solution
rk4Method(x0, y0, h, xn);
return 0;
}
